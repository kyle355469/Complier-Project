class fib
{
/* 2:     using iteration. %} */
/* 3:  */
/* 4: % global variables */
/* 5: const  n: int := 8 */
/* 6:  */
/* 7: % iterative function */
	method public static int itFibonacci(int)
	max_stack 15
	max_locals 15
	{
/* 8: function itFibonacci (n: int) : int */
/* 9:   var Fn: int */
/* 10:   var FNminus1: int */
/* 11:   var temp: int */
/* 12:  */
		sipush 1
/* 13:   Fn := 1 */
		istore 1
		sipush 1
/* 14:   FNminus1 := 1 */
		istore 2
Lbegin1:
/* 15:   loop */
		iload 0
		sipush 2
		isub
		ifle /* 16:     exit when (n <= 2)  */
Ltrue1
		iconst_0
		goto Lfalse1
Ltrue1:
		iconst_1
Lfalse1:
		ifne Lexit1
		iload 1
/* 17:     temp := Fn */
		istore 3
		iload 1
		iload 2
/* 18:     Fn := Fn + FNminus1 */
		iadd
		istore 1
		iload 3
/* 19:     FNminus1 := temp */
		istore 2
		iload 0
		sipush 1
/* 20:     n := n - 1 */
		isub
		istore 0
		goto Lbegin1
Lexit1:
/* 21:   end loop */
		iload 1
/* 22:   result Fn */
		ireturn
	}
	method public static void main(java.lang.String[])
	max_stack 15
	max_locals 15
	{
/* 23: end itFibonacci */
/* 24:  */
/* 25: % main program  */
		getstatic java.io.PrintStream java.lang.System.out
		ldc "N: "
/* 26: put "N: " */
		invokevirtual void java.io.PrintStream.print(java.lang.String)
		getstatic java.io.PrintStream java.lang.System.out
		sipush 8
/* 27: put n */
		invokevirtual void java.io.PrintStream.println(int)
		getstatic java.io.PrintStream java.lang.System.out
		invokevirtual void java.io.PrintStream.println()
/* 28: skip */
		getstatic java.io.PrintStream java.lang.System.out
		ldc "Result of iterative computation:  "
/* 29: put "Result of iterative computation:  " */
		invokevirtual void java.io.PrintStream.print(java.lang.String)
		getstatic java.io.PrintStream java.lang.System.out
		sipush 8
		invokestatic int fib.itFibonacci(int)
/* 30: put itFibonacci(n) */
/* 31:  */
		invokevirtual void java.io.PrintStream.println(int)
		return
	}
}
