Terminals which are not used

   SEMICOLON
   U_BRACKET
   L_BRACKET
   U_B_PAREN
   L_B_PAREN
   CHAR
   DEFAULT
   DO
   OF


State 5 conflicts: 2 shift/reduce
State 24 conflicts: 12 shift/reduce, 13 reduce/reduce
State 51 conflicts: 10 shift/reduce
State 58 conflicts: 12 shift/reduce, 14 reduce/reduce
State 67 conflicts: 12 shift/reduce, 13 reduce/reduce
State 71 conflicts: 12 shift/reduce, 13 reduce/reduce
State 152 conflicts: 12 shift/reduce, 13 reduce/reduce
State 154 conflicts: 12 shift/reduce, 14 reduce/reduce
State 178 conflicts: 12 shift/reduce, 13 reduce/reduce
State 185 conflicts: 12 shift/reduce, 13 reduce/reduce


Grammar

    0 $accept: programss $end

    1 @1: /* empty */

    2 programss: pre_var_dec function_dec @1 pre_stmt

    3 programs: /* empty */
    4         | program programs

    5 program: pre_var_dec
    6        | pre_stmt

    7 identifier: ID

    8 pre_var_dec: /* empty */
    9            | variable_dec

   10 variable_dec: variable_dec variable_type
   11             | variable_type

   12 variable_type: const_dec
   13              | var_dec

   14 @2: /* empty */

   15 @3: /* empty */

   16 const_dec: CONST @2 identifier @3 const_back

   17 const_back: GIVEN_EQUAL expr
   18           | COLON type_dec GIVEN_EQUAL expr

   19 type_dec: BOOL
   20         | STRING
   21         | INT
   22         | REAL

   23 const_val_expr: STR_CONT
   24               | INT_NUM
   25               | REAL_NUM
   26               | T_TRUE
   27               | T_FALSE

   28 var_dec: VAR identifier COLON type_dec GIVEN_EQUAL const_val_expr
   29        | VAR identifier GIVEN_EQUAL const_val_expr
   30        | VAR identifier COLON type_dec

   31 function_dec: /* empty */

   32 @4: /* empty */

   33 function_dec: function_def @4 programs END identifier

   34 @5: /* empty */

   35 @6: /* empty */

   36 function_dec: PROCEDURE identifier @5 U_PAREN argument_dec L_PAREN @6 programs END identifier

   37 @7: /* empty */

   38 function_def: FUNCTION identifier @7 U_PAREN argument_dec L_PAREN COLON type_dec

   39 argument_dec: /* empty */
   40             | argument_dec COMMA identi_req
   41             | identi_req

   42 identi_req: identifier COLON type_dec

   43 pre_stmt: /* empty */
   44         | statments

   45 statments: statments statment
   46          | statment

   47 @8: /* empty */

   48 statment: BBEGIN @8 programs END
   49         | simple_statment
   50         | cond_statment
   51         | loop_statment
   52         | func_proc_call

   53 @9: /* empty */

   54 simple_statment: ID @9 GIVEN_EQUAL expr

   55 @10: /* empty */

   56 simple_statment: PUT @10 expr
   57                | RESULT expr
   58                | RETURN

   59 @11: /* empty */

   60 simple_statment: T_EXIT @11 cond_check
   61                | SKIP

   62 cond_check: /* empty */
   63           | WHEN expr

   64 @12: /* empty */

   65 @13: /* empty */

   66 @14: /* empty */

   67 cond_statment: T_IF @12 expr @13 THEN programs @14 else_block

   68 @15: /* empty */

   69 else_block: ELSE @15 programs end_if
   70           | end_if

   71 end_if: END T_IF

   72 @16: /* empty */

   73 loop_statment: LOOP @16 programs END LOOP

   74 @17: /* empty */

   75 @18: /* empty */

   76 @19: /* empty */

   77 @20: /* empty */

   78 @21: /* empty */

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 expr @21 programs END FOR

   80 decreasing: /* empty */
   81           | DECREASING

   82 @22: /* empty */

   83 func_proc_call: identifier @22 func_call_input

   84 func_call_input: U_PAREN L_PAREN
   85                | U_PAREN func_input L_PAREN

   86 @23: /* empty */

   87 func_call_input: U_PAREN expr @23 L_PAREN

   88 func_input: func_input COMMA expr

   89 @24: /* empty */

   90 func_input: expr @24 COMMA expr

   91 expr: const_val_expr
   92     | expr PLUS expr
   93     | expr MINUS expr
   94     | expr TIMES expr
   95     | expr DIV expr
   96     | expr MOD expr
   97     | MINUS expr
   98     | U_PAREN expr L_PAREN
   99     | identifier
  100     | func_proc_call
  101     | expr L_T expr
  102     | expr EL_T expr
  103     | expr EM_T expr
  104     | expr M_T expr
  105     | expr EQUAL expr
  106     | expr NOT_EQ expr
  107     | expr AND expr
  108     | expr OR expr
  109     | NOT expr


Terminals, with rules where they appear

$end (0) 0
error (256)
DOT (258) 79
COMMA (259) 40 88 90
COLON (260) 18 28 30 38 42 79
SEMICOLON (261)
U_PAREN (262) 36 38 84 85 87 98
L_PAREN (263) 36 38 84 85 87 98
U_BRACKET (264)
L_BRACKET (265)
U_B_PAREN (266)
L_B_PAREN (267)
GIVEN_EQUAL (268) 17 18 28 29 54
BBEGIN (269) 48
BOOL (270) 19
CHAR (271)
CONST (272) 16
DECREASING (273) 81
DEFAULT (274)
DO (275)
ELSE (276) 69
END (277) 33 36 48 71 73 79
T_EXIT (278) 60
T_FALSE (279) 27
FOR (280) 79
FUNCTION (281) 38
T_IF (282) 67 71
INT (283) 21
LOOP (284) 73
OF (285)
PUT (286) 56
PROCEDURE (287) 36
REAL (288) 22
RESULT (289) 57
RETURN (290) 58
SKIP (291) 61
STRING (292) 20
THEN (293) 67
T_TRUE (294) 26
VAR (295) 28 29 30
WHEN (296) 63
ID (297) 7 54
INT_NUM (298) 24
REAL_NUM (299) 25
STR_CONT (300) 23
OR (301) 108
AND (302) 107
MINUS (303) 93 97
PLUS (304) 92
MOD (305) 96
DIV (306) 95
TIMES (307) 94
UMINUS (308)
NOT (309) 109
NOT_EQ (310) 106
EQUAL (311) 105
EM_T (312) 103
M_T (313) 104
EL_T (314) 102
L_T (315) 101


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
programss (62)
    on left: 2, on right: 0
@1 (63)
    on left: 1, on right: 2
programs (64)
    on left: 3 4, on right: 4 33 36 48 67 69 73 79
program (65)
    on left: 5 6, on right: 4
identifier (66)
    on left: 7, on right: 16 28 29 30 33 36 38 42 79 83 99
pre_var_dec (67)
    on left: 8 9, on right: 2 5
variable_dec (68)
    on left: 10 11, on right: 9 10
variable_type (69)
    on left: 12 13, on right: 10 11
const_dec (70)
    on left: 16, on right: 12
@2 (71)
    on left: 14, on right: 16
@3 (72)
    on left: 15, on right: 16
const_back (73)
    on left: 17 18, on right: 16
type_dec (74)
    on left: 19 20 21 22, on right: 18 28 30 38 42
const_val_expr (75)
    on left: 23 24 25 26 27, on right: 28 29 91
var_dec (76)
    on left: 28 29 30, on right: 13
function_dec (77)
    on left: 31 33 36, on right: 2
@4 (78)
    on left: 32, on right: 33
@5 (79)
    on left: 34, on right: 36
@6 (80)
    on left: 35, on right: 36
function_def (81)
    on left: 38, on right: 33
@7 (82)
    on left: 37, on right: 38
argument_dec (83)
    on left: 39 40 41, on right: 36 38 40
identi_req (84)
    on left: 42, on right: 40 41
pre_stmt (85)
    on left: 43 44, on right: 2 6
statments (86)
    on left: 45 46, on right: 44 45
statment (87)
    on left: 48 49 50 51 52, on right: 45 46
@8 (88)
    on left: 47, on right: 48
simple_statment (89)
    on left: 54 56 57 58 60 61, on right: 49
@9 (90)
    on left: 53, on right: 54
@10 (91)
    on left: 55, on right: 56
@11 (92)
    on left: 59, on right: 60
cond_check (93)
    on left: 62 63, on right: 60
cond_statment (94)
    on left: 67, on right: 50
@12 (95)
    on left: 64, on right: 67
@13 (96)
    on left: 65, on right: 67
@14 (97)
    on left: 66, on right: 67
else_block (98)
    on left: 69 70, on right: 67
@15 (99)
    on left: 68, on right: 69
end_if (100)
    on left: 71, on right: 69 70
loop_statment (101)
    on left: 73 79, on right: 51
@16 (102)
    on left: 72, on right: 73
@17 (103)
    on left: 74, on right: 79
@18 (104)
    on left: 75, on right: 79
@19 (105)
    on left: 76, on right: 79
@20 (106)
    on left: 77, on right: 79
@21 (107)
    on left: 78, on right: 79
decreasing (108)
    on left: 80 81, on right: 79
func_proc_call (109)
    on left: 83, on right: 52 100
@22 (110)
    on left: 82, on right: 83
func_call_input (111)
    on left: 84 85 87, on right: 83
@23 (112)
    on left: 86, on right: 87
func_input (113)
    on left: 88 90, on right: 85 88
@24 (114)
    on left: 89, on right: 90
expr (115)
    on left: 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
    107 108 109, on right: 17 18 54 56 57 63 67 79 87 88 90 92 93 94
    95 96 97 98 101 102 103 104 105 106 107 108 109


state 0

    0 $accept: . programss $end

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 8 (pre_var_dec)

    programss      go to state 3
    pre_var_dec    go to state 4
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8


state 1

   16 const_dec: CONST . @2 identifier @3 const_back

    $default  reduce using rule 14 (@2)

    @2  go to state 9


state 2

   28 var_dec: VAR . identifier COLON type_dec GIVEN_EQUAL const_val_expr
   29        | VAR . identifier GIVEN_EQUAL const_val_expr
   30        | VAR . identifier COLON type_dec

    ID  shift, and go to state 10

    identifier  go to state 11


state 3

    0 $accept: programss . $end

    $end  shift, and go to state 12


state 4

    2 programss: pre_var_dec . function_dec @1 pre_stmt

    FUNCTION   shift, and go to state 13
    PROCEDURE  shift, and go to state 14

    $default  reduce using rule 31 (function_dec)

    function_dec  go to state 15
    function_def  go to state 16


state 5

    9 pre_var_dec: variable_dec .
   10 variable_dec: variable_dec . variable_type

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    CONST     [reduce using rule 9 (pre_var_dec)]
    VAR       [reduce using rule 9 (pre_var_dec)]
    $default  reduce using rule 9 (pre_var_dec)

    variable_type  go to state 17
    const_dec      go to state 7
    var_dec        go to state 8


state 6

   11 variable_dec: variable_type .

    $default  reduce using rule 11 (variable_dec)


state 7

   12 variable_type: const_dec .

    $default  reduce using rule 12 (variable_type)


state 8

   13 variable_type: var_dec .

    $default  reduce using rule 13 (variable_type)


state 9

   16 const_dec: CONST @2 . identifier @3 const_back

    ID  shift, and go to state 10

    identifier  go to state 18


state 10

    7 identifier: ID .

    $default  reduce using rule 7 (identifier)


state 11

   28 var_dec: VAR identifier . COLON type_dec GIVEN_EQUAL const_val_expr
   29        | VAR identifier . GIVEN_EQUAL const_val_expr
   30        | VAR identifier . COLON type_dec

    COLON        shift, and go to state 19
    GIVEN_EQUAL  shift, and go to state 20


state 12

    0 $accept: programss $end .

    $default  accept


state 13

   38 function_def: FUNCTION . identifier @7 U_PAREN argument_dec L_PAREN COLON type_dec

    ID  shift, and go to state 10

    identifier  go to state 21


state 14

   36 function_dec: PROCEDURE . identifier @5 U_PAREN argument_dec L_PAREN @6 programs END identifier

    ID  shift, and go to state 10

    identifier  go to state 22


state 15

    2 programss: pre_var_dec function_dec . @1 pre_stmt

    $default  reduce using rule 1 (@1)

    @1  go to state 23


state 16

   33 function_dec: function_def . @4 programs END identifier

    $default  reduce using rule 32 (@4)

    @4  go to state 24


state 17

   10 variable_dec: variable_dec variable_type .

    $default  reduce using rule 10 (variable_dec)


state 18

   16 const_dec: CONST @2 identifier . @3 const_back

    $default  reduce using rule 15 (@3)

    @3  go to state 25


state 19

   28 var_dec: VAR identifier COLON . type_dec GIVEN_EQUAL const_val_expr
   30        | VAR identifier COLON . type_dec

    BOOL    shift, and go to state 26
    INT     shift, and go to state 27
    REAL    shift, and go to state 28
    STRING  shift, and go to state 29

    type_dec  go to state 30


state 20

   29 var_dec: VAR identifier GIVEN_EQUAL . const_val_expr

    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35

    const_val_expr  go to state 36


state 21

   38 function_def: FUNCTION identifier . @7 U_PAREN argument_dec L_PAREN COLON type_dec

    $default  reduce using rule 37 (@7)

    @7  go to state 37


state 22

   36 function_dec: PROCEDURE identifier . @5 U_PAREN argument_dec L_PAREN @6 programs END identifier

    $default  reduce using rule 34 (@5)

    @5  go to state 38


state 23

    2 programss: pre_var_dec function_dec @1 . pre_stmt

    BBEGIN  shift, and go to state 39
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    ID      shift, and go to state 48

    $default  reduce using rule 43 (pre_stmt)

    identifier       go to state 49
    pre_stmt         go to state 50
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 24

   33 function_dec: function_def @4 . programs END identifier

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 57
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 25

   16 const_dec: CONST @2 identifier @3 . const_back

    COLON        shift, and go to state 61
    GIVEN_EQUAL  shift, and go to state 62

    const_back  go to state 63


state 26

   19 type_dec: BOOL .

    $default  reduce using rule 19 (type_dec)


state 27

   21 type_dec: INT .

    $default  reduce using rule 21 (type_dec)


state 28

   22 type_dec: REAL .

    $default  reduce using rule 22 (type_dec)


state 29

   20 type_dec: STRING .

    $default  reduce using rule 20 (type_dec)


state 30

   28 var_dec: VAR identifier COLON type_dec . GIVEN_EQUAL const_val_expr
   30        | VAR identifier COLON type_dec .

    GIVEN_EQUAL  shift, and go to state 64

    $default  reduce using rule 30 (var_dec)


state 31

   27 const_val_expr: T_FALSE .

    $default  reduce using rule 27 (const_val_expr)


state 32

   26 const_val_expr: T_TRUE .

    $default  reduce using rule 26 (const_val_expr)


state 33

   24 const_val_expr: INT_NUM .

    $default  reduce using rule 24 (const_val_expr)


state 34

   25 const_val_expr: REAL_NUM .

    $default  reduce using rule 25 (const_val_expr)


state 35

   23 const_val_expr: STR_CONT .

    $default  reduce using rule 23 (const_val_expr)


state 36

   29 var_dec: VAR identifier GIVEN_EQUAL const_val_expr .

    $default  reduce using rule 29 (var_dec)


state 37

   38 function_def: FUNCTION identifier @7 . U_PAREN argument_dec L_PAREN COLON type_dec

    U_PAREN  shift, and go to state 65


state 38

   36 function_dec: PROCEDURE identifier @5 . U_PAREN argument_dec L_PAREN @6 programs END identifier

    U_PAREN  shift, and go to state 66


state 39

   48 statment: BBEGIN . @8 programs END

    $default  reduce using rule 47 (@8)

    @8  go to state 67


state 40

   60 simple_statment: T_EXIT . @11 cond_check

    $default  reduce using rule 59 (@11)

    @11  go to state 68


state 41

   79 loop_statment: FOR . @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 expr @21 programs END FOR

    $default  reduce using rule 74 (@17)

    @17  go to state 69


state 42

   67 cond_statment: T_IF . @12 expr @13 THEN programs @14 else_block

    $default  reduce using rule 64 (@12)

    @12  go to state 70


state 43

   73 loop_statment: LOOP . @16 programs END LOOP

    $default  reduce using rule 72 (@16)

    @16  go to state 71


state 44

   56 simple_statment: PUT . @10 expr

    $default  reduce using rule 55 (@10)

    @10  go to state 72


state 45

   57 simple_statment: RESULT . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 79


state 46

   58 simple_statment: RETURN .

    $default  reduce using rule 58 (simple_statment)


state 47

   61 simple_statment: SKIP .

    $default  reduce using rule 61 (simple_statment)


state 48

    7 identifier: ID .
   54 simple_statment: ID . @9 GIVEN_EQUAL expr

    GIVEN_EQUAL  reduce using rule 53 (@9)
    $default     reduce using rule 7 (identifier)

    @9  go to state 80


state 49

   83 func_proc_call: identifier . @22 func_call_input

    $default  reduce using rule 82 (@22)

    @22  go to state 81


state 50

    2 programss: pre_var_dec function_dec @1 pre_stmt .

    $default  reduce using rule 2 (programss)


state 51

   44 pre_stmt: statments .
   45 statments: statments . statment

    BBEGIN  shift, and go to state 39
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 44 (pre_stmt)]
    T_EXIT    [reduce using rule 44 (pre_stmt)]
    FOR       [reduce using rule 44 (pre_stmt)]
    T_IF      [reduce using rule 44 (pre_stmt)]
    LOOP      [reduce using rule 44 (pre_stmt)]
    PUT       [reduce using rule 44 (pre_stmt)]
    RESULT    [reduce using rule 44 (pre_stmt)]
    RETURN    [reduce using rule 44 (pre_stmt)]
    SKIP      [reduce using rule 44 (pre_stmt)]
    ID        [reduce using rule 44 (pre_stmt)]
    $default  reduce using rule 44 (pre_stmt)

    identifier       go to state 49
    statment         go to state 82
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 52

   46 statments: statment .

    $default  reduce using rule 46 (statments)


state 53

   49 statment: simple_statment .

    $default  reduce using rule 49 (statment)


state 54

   50 statment: cond_statment .

    $default  reduce using rule 50 (statment)


state 55

   51 statment: loop_statment .

    $default  reduce using rule 51 (statment)


state 56

   52 statment: func_proc_call .

    $default  reduce using rule 52 (statment)


state 57

   33 function_dec: function_def @4 programs . END identifier

    END  shift, and go to state 83


state 58

    4 programs: program . programs

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    ELSE      reduce using rule 3 (programs)
    ELSE      [reduce using rule 8 (pre_var_dec)]
    ELSE      [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 84
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 59

    5 program: pre_var_dec .

    $default  reduce using rule 5 (program)


state 60

    6 program: pre_stmt .

    $default  reduce using rule 6 (program)


state 61

   18 const_back: COLON . type_dec GIVEN_EQUAL expr

    BOOL    shift, and go to state 26
    INT     shift, and go to state 27
    REAL    shift, and go to state 28
    STRING  shift, and go to state 29

    type_dec  go to state 85


state 62

   17 const_back: GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 86


state 63

   16 const_dec: CONST @2 identifier @3 const_back .

    $default  reduce using rule 16 (const_dec)


state 64

   28 var_dec: VAR identifier COLON type_dec GIVEN_EQUAL . const_val_expr

    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35

    const_val_expr  go to state 87


state 65

   38 function_def: FUNCTION identifier @7 U_PAREN . argument_dec L_PAREN COLON type_dec

    ID  shift, and go to state 10

    $default  reduce using rule 39 (argument_dec)

    identifier    go to state 88
    argument_dec  go to state 89
    identi_req    go to state 90


state 66

   36 function_dec: PROCEDURE identifier @5 U_PAREN . argument_dec L_PAREN @6 programs END identifier

    ID  shift, and go to state 10

    $default  reduce using rule 39 (argument_dec)

    identifier    go to state 88
    argument_dec  go to state 91
    identi_req    go to state 90


state 67

   48 statment: BBEGIN @8 . programs END

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 92
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 68

   60 simple_statment: T_EXIT @11 . cond_check

    WHEN  shift, and go to state 93

    $default  reduce using rule 62 (cond_check)

    cond_check  go to state 94


state 69

   79 loop_statment: FOR @17 . decreasing identifier @18 COLON expr @19 DOT DOT @20 expr @21 programs END FOR

    DECREASING  shift, and go to state 95

    $default  reduce using rule 80 (decreasing)

    decreasing  go to state 96


state 70

   67 cond_statment: T_IF @12 . expr @13 THEN programs @14 else_block

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 97


state 71

   73 loop_statment: LOOP @16 . programs END LOOP

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 98
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 72

   56 simple_statment: PUT @10 . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 99


state 73

   98 expr: U_PAREN . expr L_PAREN

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 100


state 74

   97 expr: MINUS . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 101


state 75

  109 expr: NOT . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 102


state 76

   83 func_proc_call: identifier . @22 func_call_input
   99 expr: identifier .

    U_PAREN   reduce using rule 82 (@22)
    $default  reduce using rule 99 (expr)

    @22  go to state 81


state 77

   91 expr: const_val_expr .

    $default  reduce using rule 91 (expr)


state 78

  100 expr: func_proc_call .

    $default  reduce using rule 100 (expr)


state 79

   57 simple_statment: RESULT expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 57 (simple_statment)


state 80

   54 simple_statment: ID @9 . GIVEN_EQUAL expr

    GIVEN_EQUAL  shift, and go to state 116


state 81

   83 func_proc_call: identifier @22 . func_call_input

    U_PAREN  shift, and go to state 117

    func_call_input  go to state 118


state 82

   45 statments: statments statment .

    $default  reduce using rule 45 (statments)


state 83

   33 function_dec: function_def @4 programs END . identifier

    ID  shift, and go to state 10

    identifier  go to state 119


state 84

    4 programs: program programs .

    $default  reduce using rule 4 (programs)


state 85

   18 const_back: COLON type_dec . GIVEN_EQUAL expr

    GIVEN_EQUAL  shift, and go to state 120


state 86

   17 const_back: GIVEN_EQUAL expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 17 (const_back)


state 87

   28 var_dec: VAR identifier COLON type_dec GIVEN_EQUAL const_val_expr .

    $default  reduce using rule 28 (var_dec)


state 88

   42 identi_req: identifier . COLON type_dec

    COLON  shift, and go to state 121


state 89

   38 function_def: FUNCTION identifier @7 U_PAREN argument_dec . L_PAREN COLON type_dec
   40 argument_dec: argument_dec . COMMA identi_req

    COMMA    shift, and go to state 122
    L_PAREN  shift, and go to state 123


state 90

   41 argument_dec: identi_req .

    $default  reduce using rule 41 (argument_dec)


state 91

   36 function_dec: PROCEDURE identifier @5 U_PAREN argument_dec . L_PAREN @6 programs END identifier
   40 argument_dec: argument_dec . COMMA identi_req

    COMMA    shift, and go to state 122
    L_PAREN  shift, and go to state 124


state 92

   48 statment: BBEGIN @8 programs . END

    END  shift, and go to state 125


state 93

   63 cond_check: WHEN . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 126


state 94

   60 simple_statment: T_EXIT @11 cond_check .

    $default  reduce using rule 60 (simple_statment)


state 95

   81 decreasing: DECREASING .

    $default  reduce using rule 81 (decreasing)


state 96

   79 loop_statment: FOR @17 decreasing . identifier @18 COLON expr @19 DOT DOT @20 expr @21 programs END FOR

    ID  shift, and go to state 10

    identifier  go to state 127


state 97

   67 cond_statment: T_IF @12 expr . @13 THEN programs @14 else_block
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 65 (@13)

    @13  go to state 128


state 98

   73 loop_statment: LOOP @16 programs . END LOOP

    END  shift, and go to state 129


state 99

   56 simple_statment: PUT @10 expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 56 (simple_statment)


state 100

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
   98     | U_PAREN expr . L_PAREN
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    L_PAREN  shift, and go to state 130
    OR       shift, and go to state 103
    AND      shift, and go to state 104
    MINUS    shift, and go to state 105
    PLUS     shift, and go to state 106
    MOD      shift, and go to state 107
    DIV      shift, and go to state 108
    TIMES    shift, and go to state 109
    NOT_EQ   shift, and go to state 110
    EQUAL    shift, and go to state 111
    EM_T     shift, and go to state 112
    M_T      shift, and go to state 113
    EL_T     shift, and go to state 114
    L_T      shift, and go to state 115


state 101

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
   97     | MINUS expr .
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 97 (expr)


state 102

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr
  109     | NOT expr .

    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 109 (expr)


state 103

  108 expr: expr OR . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 131


state 104

  107 expr: expr AND . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 132


state 105

   93 expr: expr MINUS . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 133


state 106

   92 expr: expr PLUS . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 134


state 107

   96 expr: expr MOD . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 135


state 108

   95 expr: expr DIV . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 136


state 109

   94 expr: expr TIMES . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 137


state 110

  106 expr: expr NOT_EQ . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 138


state 111

  105 expr: expr EQUAL . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 139


state 112

  103 expr: expr EM_T . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 140


state 113

  104 expr: expr M_T . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 141


state 114

  102 expr: expr EL_T . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 142


state 115

  101 expr: expr L_T . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 143


state 116

   54 simple_statment: ID @9 GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 144


state 117

   84 func_call_input: U_PAREN . L_PAREN
   85                | U_PAREN . func_input L_PAREN
   87                | U_PAREN . expr @23 L_PAREN

    U_PAREN   shift, and go to state 73
    L_PAREN   shift, and go to state 145
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    func_input      go to state 146
    expr            go to state 147


state 118

   83 func_proc_call: identifier @22 func_call_input .

    $default  reduce using rule 83 (func_proc_call)


state 119

   33 function_dec: function_def @4 programs END identifier .

    $default  reduce using rule 33 (function_dec)


state 120

   18 const_back: COLON type_dec GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 148


state 121

   42 identi_req: identifier COLON . type_dec

    BOOL    shift, and go to state 26
    INT     shift, and go to state 27
    REAL    shift, and go to state 28
    STRING  shift, and go to state 29

    type_dec  go to state 149


state 122

   40 argument_dec: argument_dec COMMA . identi_req

    ID  shift, and go to state 10

    identifier  go to state 88
    identi_req  go to state 150


state 123

   38 function_def: FUNCTION identifier @7 U_PAREN argument_dec L_PAREN . COLON type_dec

    COLON  shift, and go to state 151


state 124

   36 function_dec: PROCEDURE identifier @5 U_PAREN argument_dec L_PAREN . @6 programs END identifier

    $default  reduce using rule 35 (@6)

    @6  go to state 152


state 125

   48 statment: BBEGIN @8 programs END .

    $default  reduce using rule 48 (statment)


state 126

   63 cond_check: WHEN expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 63 (cond_check)


state 127

   79 loop_statment: FOR @17 decreasing identifier . @18 COLON expr @19 DOT DOT @20 expr @21 programs END FOR

    $default  reduce using rule 75 (@18)

    @18  go to state 153


state 128

   67 cond_statment: T_IF @12 expr @13 . THEN programs @14 else_block

    THEN  shift, and go to state 154


state 129

   73 loop_statment: LOOP @16 programs END . LOOP

    LOOP  shift, and go to state 155


state 130

   98 expr: U_PAREN expr L_PAREN .

    $default  reduce using rule 98 (expr)


state 131

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr
  108     | expr OR expr .

    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 108 (expr)


state 132

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  107     | expr AND expr .
  108     | expr . OR expr

    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 107 (expr)


state 133

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   93     | expr MINUS expr .
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 93 (expr)


state 134

   92 expr: expr . PLUS expr
   92     | expr PLUS expr .
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 92 (expr)


state 135

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
   96     | expr MOD expr .
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 96 (expr)


state 136

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   95     | expr DIV expr .
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 95 (expr)


state 137

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   94     | expr TIMES expr .
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 94 (expr)


state 138

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  106     | expr NOT_EQ expr .
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 106 (expr)


state 139

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  105     | expr EQUAL expr .
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 105 (expr)


state 140

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  103     | expr EM_T expr .
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 103 (expr)


state 141

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  104     | expr M_T expr .
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 104 (expr)


state 142

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  102     | expr EL_T expr .
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 102 (expr)


state 143

   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  101     | expr L_T expr .
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 101 (expr)


state 144

   54 simple_statment: ID @9 GIVEN_EQUAL expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 54 (simple_statment)


state 145

   84 func_call_input: U_PAREN L_PAREN .

    $default  reduce using rule 84 (func_call_input)


state 146

   85 func_call_input: U_PAREN func_input . L_PAREN
   88 func_input: func_input . COMMA expr

    COMMA    shift, and go to state 156
    L_PAREN  shift, and go to state 157


state 147

   87 func_call_input: U_PAREN expr . @23 L_PAREN
   90 func_input: expr . @24 COMMA expr
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    COMMA     reduce using rule 89 (@24)
    $default  reduce using rule 86 (@23)

    @23  go to state 158
    @24  go to state 159


state 148

   18 const_back: COLON type_dec GIVEN_EQUAL expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 18 (const_back)


state 149

   42 identi_req: identifier COLON type_dec .

    $default  reduce using rule 42 (identi_req)


state 150

   40 argument_dec: argument_dec COMMA identi_req .

    $default  reduce using rule 40 (argument_dec)


state 151

   38 function_def: FUNCTION identifier @7 U_PAREN argument_dec L_PAREN COLON . type_dec

    BOOL    shift, and go to state 26
    INT     shift, and go to state 27
    REAL    shift, and go to state 28
    STRING  shift, and go to state 29

    type_dec  go to state 160


state 152

   36 function_dec: PROCEDURE identifier @5 U_PAREN argument_dec L_PAREN @6 . programs END identifier

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 161
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 153

   79 loop_statment: FOR @17 decreasing identifier @18 . COLON expr @19 DOT DOT @20 expr @21 programs END FOR

    COLON  shift, and go to state 162


state 154

   67 cond_statment: T_IF @12 expr @13 THEN . programs @14 else_block

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    ELSE      reduce using rule 3 (programs)
    ELSE      [reduce using rule 8 (pre_var_dec)]
    ELSE      [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 163
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 155

   73 loop_statment: LOOP @16 programs END LOOP .

    $default  reduce using rule 73 (loop_statment)


state 156

   88 func_input: func_input COMMA . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 164


state 157

   85 func_call_input: U_PAREN func_input L_PAREN .

    $default  reduce using rule 85 (func_call_input)


state 158

   87 func_call_input: U_PAREN expr @23 . L_PAREN

    L_PAREN  shift, and go to state 165


state 159

   90 func_input: expr @24 . COMMA expr

    COMMA  shift, and go to state 166


state 160

   38 function_def: FUNCTION identifier @7 U_PAREN argument_dec L_PAREN COLON type_dec .

    $default  reduce using rule 38 (function_def)


state 161

   36 function_dec: PROCEDURE identifier @5 U_PAREN argument_dec L_PAREN @6 programs . END identifier

    END  shift, and go to state 167


state 162

   79 loop_statment: FOR @17 decreasing identifier @18 COLON . expr @19 DOT DOT @20 expr @21 programs END FOR

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 168


state 163

   67 cond_statment: T_IF @12 expr @13 THEN programs . @14 else_block

    $default  reduce using rule 66 (@14)

    @14  go to state 169


state 164

   88 func_input: func_input COMMA expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 88 (func_input)


state 165

   87 func_call_input: U_PAREN expr @23 L_PAREN .

    $default  reduce using rule 87 (func_call_input)


state 166

   90 func_input: expr @24 COMMA . expr

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 170


state 167

   36 function_dec: PROCEDURE identifier @5 U_PAREN argument_dec L_PAREN @6 programs END . identifier

    ID  shift, and go to state 10

    identifier  go to state 171


state 168

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr . @19 DOT DOT @20 expr @21 programs END FOR
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 76 (@19)

    @19  go to state 172


state 169

   67 cond_statment: T_IF @12 expr @13 THEN programs @14 . else_block

    ELSE  shift, and go to state 173
    END   shift, and go to state 174

    else_block  go to state 175
    end_if      go to state 176


state 170

   90 func_input: expr @24 COMMA expr .
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 90 (func_input)


state 171

   36 function_dec: PROCEDURE identifier @5 U_PAREN argument_dec L_PAREN @6 programs END identifier .

    $default  reduce using rule 36 (function_dec)


state 172

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 . DOT DOT @20 expr @21 programs END FOR

    DOT  shift, and go to state 177


state 173

   69 else_block: ELSE . @15 programs end_if

    $default  reduce using rule 68 (@15)

    @15  go to state 178


state 174

   71 end_if: END . T_IF

    T_IF  shift, and go to state 179


state 175

   67 cond_statment: T_IF @12 expr @13 THEN programs @14 else_block .

    $default  reduce using rule 67 (cond_statment)


state 176

   70 else_block: end_if .

    $default  reduce using rule 70 (else_block)


state 177

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT . DOT @20 expr @21 programs END FOR

    DOT  shift, and go to state 180


state 178

   69 else_block: ELSE @15 . programs end_if

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 181
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 179

   71 end_if: END T_IF .

    $default  reduce using rule 71 (end_if)


state 180

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT . @20 expr @21 programs END FOR

    $default  reduce using rule 77 (@20)

    @20  go to state 182


state 181

   69 else_block: ELSE @15 programs . end_if

    END  shift, and go to state 174

    end_if  go to state 183


state 182

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 . expr @21 programs END FOR

    U_PAREN   shift, and go to state 73
    T_FALSE   shift, and go to state 31
    T_TRUE    shift, and go to state 32
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 33
    REAL_NUM  shift, and go to state 34
    STR_CONT  shift, and go to state 35
    MINUS     shift, and go to state 74
    NOT       shift, and go to state 75

    identifier      go to state 76
    const_val_expr  go to state 77
    func_proc_call  go to state 78
    expr            go to state 184


state 183

   69 else_block: ELSE @15 programs end_if .

    $default  reduce using rule 69 (else_block)


state 184

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 expr . @21 programs END FOR
   92 expr: expr . PLUS expr
   93     | expr . MINUS expr
   94     | expr . TIMES expr
   95     | expr . DIV expr
   96     | expr . MOD expr
  101     | expr . L_T expr
  102     | expr . EL_T expr
  103     | expr . EM_T expr
  104     | expr . M_T expr
  105     | expr . EQUAL expr
  106     | expr . NOT_EQ expr
  107     | expr . AND expr
  108     | expr . OR expr

    OR      shift, and go to state 103
    AND     shift, and go to state 104
    MINUS   shift, and go to state 105
    PLUS    shift, and go to state 106
    MOD     shift, and go to state 107
    DIV     shift, and go to state 108
    TIMES   shift, and go to state 109
    NOT_EQ  shift, and go to state 110
    EQUAL   shift, and go to state 111
    EM_T    shift, and go to state 112
    M_T     shift, and go to state 113
    EL_T    shift, and go to state 114
    L_T     shift, and go to state 115

    $default  reduce using rule 78 (@21)

    @21  go to state 185


state 185

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 expr @21 . programs END FOR

    BBEGIN  shift, and go to state 39
    CONST   shift, and go to state 1
    T_EXIT  shift, and go to state 40
    FOR     shift, and go to state 41
    T_IF    shift, and go to state 42
    LOOP    shift, and go to state 43
    PUT     shift, and go to state 44
    RESULT  shift, and go to state 45
    RETURN  shift, and go to state 46
    SKIP    shift, and go to state 47
    VAR     shift, and go to state 2
    ID      shift, and go to state 48

    BBEGIN    [reduce using rule 8 (pre_var_dec)]
    BBEGIN    [reduce using rule 43 (pre_stmt)]
    CONST     [reduce using rule 8 (pre_var_dec)]
    CONST     [reduce using rule 43 (pre_stmt)]
    END       reduce using rule 3 (programs)
    END       [reduce using rule 8 (pre_var_dec)]
    END       [reduce using rule 43 (pre_stmt)]
    T_EXIT    [reduce using rule 8 (pre_var_dec)]
    T_EXIT    [reduce using rule 43 (pre_stmt)]
    FOR       [reduce using rule 8 (pre_var_dec)]
    FOR       [reduce using rule 43 (pre_stmt)]
    T_IF      [reduce using rule 8 (pre_var_dec)]
    T_IF      [reduce using rule 43 (pre_stmt)]
    LOOP      [reduce using rule 8 (pre_var_dec)]
    LOOP      [reduce using rule 43 (pre_stmt)]
    PUT       [reduce using rule 8 (pre_var_dec)]
    PUT       [reduce using rule 43 (pre_stmt)]
    RESULT    [reduce using rule 8 (pre_var_dec)]
    RESULT    [reduce using rule 43 (pre_stmt)]
    RETURN    [reduce using rule 8 (pre_var_dec)]
    RETURN    [reduce using rule 43 (pre_stmt)]
    SKIP      [reduce using rule 8 (pre_var_dec)]
    SKIP      [reduce using rule 43 (pre_stmt)]
    VAR       [reduce using rule 8 (pre_var_dec)]
    VAR       [reduce using rule 43 (pre_stmt)]
    ID        [reduce using rule 8 (pre_var_dec)]
    ID        [reduce using rule 43 (pre_stmt)]
    $default  reduce using rule 3 (programs)

    programs         go to state 186
    program          go to state 58
    identifier       go to state 49
    pre_var_dec      go to state 59
    variable_dec     go to state 5
    variable_type    go to state 6
    const_dec        go to state 7
    var_dec          go to state 8
    pre_stmt         go to state 60
    statments        go to state 51
    statment         go to state 52
    simple_statment  go to state 53
    cond_statment    go to state 54
    loop_statment    go to state 55
    func_proc_call   go to state 56


state 186

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 expr @21 programs . END FOR

    END  shift, and go to state 187


state 187

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 expr @21 programs END . FOR

    FOR  shift, and go to state 188


state 188

   79 loop_statment: FOR @17 decreasing identifier @18 COLON expr @19 DOT DOT @20 expr @21 programs END FOR .

    $default  reduce using rule 79 (loop_statment)
