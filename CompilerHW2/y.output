Terminals which are not used

   SEMICOLON
   U_B_PAREN
   L_B_PAREN
   CHAR
   DEFAULT
   DO


Grammar

    0 $accept: program $end

    1 program: pre_var_dec function_dec pre_stmt

    2 identifier: ID

    3 @1: /* empty */

    4 identifier: ID @1 U_BRACKET INT_NUM L_BRACKET

    5 pre_var_dec: /* empty */
    6            | variable_dec

    7 variable_dec: variable_dec variable_type
    8             | variable_type

    9 variable_type: const_dec
   10              | var_dec
   11              | var_array_dec

   12 @2: /* empty */

   13 const_dec: CONST identifier @2 GIVEN_EQUAL expr

   14 @3: /* empty */

   15 const_dec: CONST identifier @3 COLON type_dec GIVEN_EQUAL expr

   16 type_dec: BOOL
   17         | STRING
   18         | INT
   19         | REAL

   20 const_val_expr: STR_CONT
   21               | INT_NUM
   22               | REAL_NUM
   23               | T_TRUE
   24               | T_FALSE

   25 var_dec: VAR identifier COLON type_dec GIVEN_EQUAL expr
   26        | VAR identifier GIVEN_EQUAL expr
   27        | VAR identifier COLON type_dec

   28 var_array_dec: VAR identifier COLON ARRAY INT_NUM DOT DOT INT_NUM OF type_dec

   29 function_dec: /* empty */
   30             | function_def pre_var_dec pre_stmt END identifier

   31 @4: /* empty */

   32 function_dec: PROCEDURE identifier @4 U_PAREN argument_dec L_PAREN pre_var_dec pre_stmt END identifier

   33 @5: /* empty */

   34 function_def: FUNCTION identifier @5 U_PAREN argument_dec L_PAREN COLON type_dec

   35 argument_dec: /* empty */
   36             | argument_dec COMMA identi_req
   37             | identi_req

   38 identi_req: identifier COLON type_dec
   39           | identifier COLON ARRAY INT_NUM DOT DOT INT_NUM OF type_dec

   40 pre_stmt: /* empty */
   41         | statments

   42 statments: statments statment
   43          | statment

   44 @6: /* empty */

   45 statment: BBEGIN @6 program END
   46         | simple_statment
   47         | cond_statment
   48         | loop_statment
   49         | func_proc_call

   50 @7: /* empty */

   51 simple_statment: identifier @7 GIVEN_EQUAL expr

   52 @8: /* empty */

   53 simple_statment: PUT @8 expr
   54                | GET identifier
   55                | RESULT expr
   56                | RETURN
   57                | T_EXIT cond_check
   58                | SKIP

   59 cond_check: /* empty */
   60           | WHEN expr

   61 @9: /* empty */

   62 cond_statment: T_IF @9 U_PAREN expr L_PAREN THEN program else_block

   63 @10: /* empty */

   64 else_block: ELSE @10 program END T_IF
   65           | END T_IF

   66 @11: /* empty */

   67 loop_statment: LOOP @11 program END LOOP

   68 @12: /* empty */

   69 @13: /* empty */

   70 @14: /* empty */

   71 @15: /* empty */

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT DOT expr @15 program END FOR

   73 decreasing: /* empty */
   74           | DECREASING

   75 @16: /* empty */

   76 func_proc_call: identifier @16 func_call_input

   77 func_call_input: U_PAREN L_PAREN
   78                | U_PAREN func_input L_PAREN

   79 @17: /* empty */

   80 func_call_input: U_PAREN expr @17 L_PAREN

   81 func_input: func_input COMMA expr

   82 @18: /* empty */

   83 func_input: expr @18 COMMA expr

   84 expr: const_val_expr
   85     | expr PLUS expr
   86     | expr MINUS expr
   87     | expr TIMES expr
   88     | expr DIV expr
   89     | expr MOD expr
   90     | MINUS expr
   91     | U_PAREN expr L_PAREN
   92     | identifier
   93     | func_proc_call
   94     | expr L_T expr
   95     | expr EL_T expr
   96     | expr EM_T expr
   97     | expr M_T expr
   98     | expr EQUAL expr
   99     | expr NOT_EQ expr
  100     | expr AND expr
  101     | expr OR expr
  102     | NOT expr


Terminals, with rules where they appear

$end (0) 0
error (256)
DOT (258) 28 39 72
COMMA (259) 36 81 83
COLON (260) 15 25 27 28 34 38 39 72
SEMICOLON (261)
U_PAREN (262) 32 34 62 77 78 80 91
L_PAREN (263) 32 34 62 77 78 80 91
U_BRACKET (264) 4
L_BRACKET (265) 4
U_B_PAREN (266)
L_B_PAREN (267)
GIVEN_EQUAL (268) 13 15 25 26 51
ARRAY (269) 28 39
BBEGIN (270) 45
BOOL (271) 16
CHAR (272)
CONST (273) 13 15
DECREASING (274) 74
DEFAULT (275)
DO (276)
ELSE (277) 64
END (278) 30 32 45 64 65 67 72
T_EXIT (279) 57
T_FALSE (280) 24
FOR (281) 72
FUNCTION (282) 34
GET (283) 54
T_IF (284) 62 64 65
INT (285) 18
LOOP (286) 67
OF (287) 28 39
PUT (288) 53
PROCEDURE (289) 32
REAL (290) 19
RESULT (291) 55
RETURN (292) 56
SKIP (293) 58
STRING (294) 17
THEN (295) 62
T_TRUE (296) 23
VAR (297) 25 26 27 28
WHEN (298) 60
ID (299) 2 4
INT_NUM (300) 4 21 28 39
REAL_NUM (301) 22
STR_CONT (302) 20
OR (303) 101
AND (304) 100
MINUS (305) 86 90
PLUS (306) 85
MOD (307) 89
DIV (308) 88
TIMES (309) 87
UMINUS (310)
NOT (311) 102
NOT_EQ (312) 99
EQUAL (313) 98
EM_T (314) 96
M_T (315) 97
EL_T (316) 95
L_T (317) 94


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
program (64)
    on left: 1, on right: 0 45 62 64 67 72
identifier (65)
    on left: 2 4, on right: 13 15 25 26 27 28 30 32 34 38 39 51 54
    72 76 92
@1 (66)
    on left: 3, on right: 4
pre_var_dec (67)
    on left: 5 6, on right: 1 30 32
variable_dec (68)
    on left: 7 8, on right: 6 7
variable_type (69)
    on left: 9 10 11, on right: 7 8
const_dec (70)
    on left: 13 15, on right: 9
@2 (71)
    on left: 12, on right: 13
@3 (72)
    on left: 14, on right: 15
type_dec (73)
    on left: 16 17 18 19, on right: 15 25 27 28 34 38 39
const_val_expr (74)
    on left: 20 21 22 23 24, on right: 84
var_dec (75)
    on left: 25 26 27, on right: 10
var_array_dec (76)
    on left: 28, on right: 11
function_dec (77)
    on left: 29 30 32, on right: 1
@4 (78)
    on left: 31, on right: 32
function_def (79)
    on left: 34, on right: 30
@5 (80)
    on left: 33, on right: 34
argument_dec (81)
    on left: 35 36 37, on right: 32 34 36
identi_req (82)
    on left: 38 39, on right: 36 37
pre_stmt (83)
    on left: 40 41, on right: 1 30 32
statments (84)
    on left: 42 43, on right: 41 42
statment (85)
    on left: 45 46 47 48 49, on right: 42 43
@6 (86)
    on left: 44, on right: 45
simple_statment (87)
    on left: 51 53 54 55 56 57 58, on right: 46
@7 (88)
    on left: 50, on right: 51
@8 (89)
    on left: 52, on right: 53
cond_check (90)
    on left: 59 60, on right: 57
cond_statment (91)
    on left: 62, on right: 47
@9 (92)
    on left: 61, on right: 62
else_block (93)
    on left: 64 65, on right: 62
@10 (94)
    on left: 63, on right: 64
loop_statment (95)
    on left: 67 72, on right: 48
@11 (96)
    on left: 66, on right: 67
@12 (97)
    on left: 68, on right: 72
@13 (98)
    on left: 69, on right: 72
@14 (99)
    on left: 70, on right: 72
@15 (100)
    on left: 71, on right: 72
decreasing (101)
    on left: 73 74, on right: 72
func_proc_call (102)
    on left: 76, on right: 49 93
@16 (103)
    on left: 75, on right: 76
func_call_input (104)
    on left: 77 78 80, on right: 76
@17 (105)
    on left: 79, on right: 80
func_input (106)
    on left: 81 83, on right: 78 81
@18 (107)
    on left: 82, on right: 83
expr (108)
    on left: 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101
    102, on right: 13 15 25 26 51 53 55 60 62 72 80 81 83 85 86 87
    88 89 90 91 94 95 96 97 98 99 100 101 102


state 0

    0 $accept: . program $end

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    program        go to state 3
    pre_var_dec    go to state 4
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 1

   13 const_dec: CONST . identifier @2 GIVEN_EQUAL expr
   15          | CONST . identifier @3 COLON type_dec GIVEN_EQUAL expr

    ID  shift, and go to state 10

    identifier  go to state 11


state 2

   25 var_dec: VAR . identifier COLON type_dec GIVEN_EQUAL expr
   26        | VAR . identifier GIVEN_EQUAL expr
   27        | VAR . identifier COLON type_dec
   28 var_array_dec: VAR . identifier COLON ARRAY INT_NUM DOT DOT INT_NUM OF type_dec

    ID  shift, and go to state 10

    identifier  go to state 12


state 3

    0 $accept: program . $end

    $end  shift, and go to state 13


state 4

    1 program: pre_var_dec . function_dec pre_stmt

    FUNCTION   shift, and go to state 14
    PROCEDURE  shift, and go to state 15

    $default  reduce using rule 29 (function_dec)

    function_dec  go to state 16
    function_def  go to state 17


state 5

    6 pre_var_dec: variable_dec .
    7 variable_dec: variable_dec . variable_type

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 6 (pre_var_dec)

    variable_type  go to state 18
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 6

    8 variable_dec: variable_type .

    $default  reduce using rule 8 (variable_dec)


state 7

    9 variable_type: const_dec .

    $default  reduce using rule 9 (variable_type)


state 8

   10 variable_type: var_dec .

    $default  reduce using rule 10 (variable_type)


state 9

   11 variable_type: var_array_dec .

    $default  reduce using rule 11 (variable_type)


state 10

    2 identifier: ID .
    4           | ID . @1 U_BRACKET INT_NUM L_BRACKET

    U_BRACKET  reduce using rule 3 (@1)
    $default   reduce using rule 2 (identifier)

    @1  go to state 19


state 11

   13 const_dec: CONST identifier . @2 GIVEN_EQUAL expr
   15          | CONST identifier . @3 COLON type_dec GIVEN_EQUAL expr

    COLON     reduce using rule 14 (@3)
    $default  reduce using rule 12 (@2)

    @2  go to state 20
    @3  go to state 21


state 12

   25 var_dec: VAR identifier . COLON type_dec GIVEN_EQUAL expr
   26        | VAR identifier . GIVEN_EQUAL expr
   27        | VAR identifier . COLON type_dec
   28 var_array_dec: VAR identifier . COLON ARRAY INT_NUM DOT DOT INT_NUM OF type_dec

    COLON        shift, and go to state 22
    GIVEN_EQUAL  shift, and go to state 23


state 13

    0 $accept: program $end .

    $default  accept


state 14

   34 function_def: FUNCTION . identifier @5 U_PAREN argument_dec L_PAREN COLON type_dec

    ID  shift, and go to state 10

    identifier  go to state 24


state 15

   32 function_dec: PROCEDURE . identifier @4 U_PAREN argument_dec L_PAREN pre_var_dec pre_stmt END identifier

    ID  shift, and go to state 10

    identifier  go to state 25


state 16

    1 program: pre_var_dec function_dec . pre_stmt

    BBEGIN  shift, and go to state 26
    T_EXIT  shift, and go to state 27
    FOR     shift, and go to state 28
    GET     shift, and go to state 29
    T_IF    shift, and go to state 30
    LOOP    shift, and go to state 31
    PUT     shift, and go to state 32
    RESULT  shift, and go to state 33
    RETURN  shift, and go to state 34
    SKIP    shift, and go to state 35
    ID      shift, and go to state 10

    $default  reduce using rule 40 (pre_stmt)

    identifier       go to state 36
    pre_stmt         go to state 37
    statments        go to state 38
    statment         go to state 39
    simple_statment  go to state 40
    cond_statment    go to state 41
    loop_statment    go to state 42
    func_proc_call   go to state 43


state 17

   30 function_dec: function_def . pre_var_dec pre_stmt END identifier

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    pre_var_dec    go to state 44
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 18

    7 variable_dec: variable_dec variable_type .

    $default  reduce using rule 7 (variable_dec)


state 19

    4 identifier: ID @1 . U_BRACKET INT_NUM L_BRACKET

    U_BRACKET  shift, and go to state 45


state 20

   13 const_dec: CONST identifier @2 . GIVEN_EQUAL expr

    GIVEN_EQUAL  shift, and go to state 46


state 21

   15 const_dec: CONST identifier @3 . COLON type_dec GIVEN_EQUAL expr

    COLON  shift, and go to state 47


state 22

   25 var_dec: VAR identifier COLON . type_dec GIVEN_EQUAL expr
   27        | VAR identifier COLON . type_dec
   28 var_array_dec: VAR identifier COLON . ARRAY INT_NUM DOT DOT INT_NUM OF type_dec

    ARRAY   shift, and go to state 48
    BOOL    shift, and go to state 49
    INT     shift, and go to state 50
    REAL    shift, and go to state 51
    STRING  shift, and go to state 52

    type_dec  go to state 53


state 23

   26 var_dec: VAR identifier GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 65


state 24

   34 function_def: FUNCTION identifier . @5 U_PAREN argument_dec L_PAREN COLON type_dec

    $default  reduce using rule 33 (@5)

    @5  go to state 66


state 25

   32 function_dec: PROCEDURE identifier . @4 U_PAREN argument_dec L_PAREN pre_var_dec pre_stmt END identifier

    $default  reduce using rule 31 (@4)

    @4  go to state 67


state 26

   45 statment: BBEGIN . @6 program END

    $default  reduce using rule 44 (@6)

    @6  go to state 68


state 27

   57 simple_statment: T_EXIT . cond_check

    WHEN  shift, and go to state 69

    $default  reduce using rule 59 (cond_check)

    cond_check  go to state 70


state 28

   72 loop_statment: FOR . @12 decreasing identifier @13 COLON expr @14 DOT DOT expr @15 program END FOR

    $default  reduce using rule 68 (@12)

    @12  go to state 71


state 29

   54 simple_statment: GET . identifier

    ID  shift, and go to state 10

    identifier  go to state 72


state 30

   62 cond_statment: T_IF . @9 U_PAREN expr L_PAREN THEN program else_block

    $default  reduce using rule 61 (@9)

    @9  go to state 73


state 31

   67 loop_statment: LOOP . @11 program END LOOP

    $default  reduce using rule 66 (@11)

    @11  go to state 74


state 32

   53 simple_statment: PUT . @8 expr

    $default  reduce using rule 52 (@8)

    @8  go to state 75


state 33

   55 simple_statment: RESULT . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 76


state 34

   56 simple_statment: RETURN .

    $default  reduce using rule 56 (simple_statment)


state 35

   58 simple_statment: SKIP .

    $default  reduce using rule 58 (simple_statment)


state 36

   51 simple_statment: identifier . @7 GIVEN_EQUAL expr
   76 func_proc_call: identifier . @16 func_call_input

    U_PAREN   reduce using rule 75 (@16)
    $default  reduce using rule 50 (@7)

    @7   go to state 77
    @16  go to state 78


state 37

    1 program: pre_var_dec function_dec pre_stmt .

    $default  reduce using rule 1 (program)


state 38

   41 pre_stmt: statments .
   42 statments: statments . statment

    BBEGIN  shift, and go to state 26
    T_EXIT  shift, and go to state 27
    FOR     shift, and go to state 28
    GET     shift, and go to state 29
    T_IF    shift, and go to state 30
    LOOP    shift, and go to state 31
    PUT     shift, and go to state 32
    RESULT  shift, and go to state 33
    RETURN  shift, and go to state 34
    SKIP    shift, and go to state 35
    ID      shift, and go to state 10

    $default  reduce using rule 41 (pre_stmt)

    identifier       go to state 36
    statment         go to state 79
    simple_statment  go to state 40
    cond_statment    go to state 41
    loop_statment    go to state 42
    func_proc_call   go to state 43


state 39

   43 statments: statment .

    $default  reduce using rule 43 (statments)


state 40

   46 statment: simple_statment .

    $default  reduce using rule 46 (statment)


state 41

   47 statment: cond_statment .

    $default  reduce using rule 47 (statment)


state 42

   48 statment: loop_statment .

    $default  reduce using rule 48 (statment)


state 43

   49 statment: func_proc_call .

    $default  reduce using rule 49 (statment)


state 44

   30 function_dec: function_def pre_var_dec . pre_stmt END identifier

    BBEGIN  shift, and go to state 26
    T_EXIT  shift, and go to state 27
    FOR     shift, and go to state 28
    GET     shift, and go to state 29
    T_IF    shift, and go to state 30
    LOOP    shift, and go to state 31
    PUT     shift, and go to state 32
    RESULT  shift, and go to state 33
    RETURN  shift, and go to state 34
    SKIP    shift, and go to state 35
    ID      shift, and go to state 10

    $default  reduce using rule 40 (pre_stmt)

    identifier       go to state 36
    pre_stmt         go to state 80
    statments        go to state 38
    statment         go to state 39
    simple_statment  go to state 40
    cond_statment    go to state 41
    loop_statment    go to state 42
    func_proc_call   go to state 43


state 45

    4 identifier: ID @1 U_BRACKET . INT_NUM L_BRACKET

    INT_NUM  shift, and go to state 81


state 46

   13 const_dec: CONST identifier @2 GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 82


state 47

   15 const_dec: CONST identifier @3 COLON . type_dec GIVEN_EQUAL expr

    BOOL    shift, and go to state 49
    INT     shift, and go to state 50
    REAL    shift, and go to state 51
    STRING  shift, and go to state 52

    type_dec  go to state 83


state 48

   28 var_array_dec: VAR identifier COLON ARRAY . INT_NUM DOT DOT INT_NUM OF type_dec

    INT_NUM  shift, and go to state 84


state 49

   16 type_dec: BOOL .

    $default  reduce using rule 16 (type_dec)


state 50

   18 type_dec: INT .

    $default  reduce using rule 18 (type_dec)


state 51

   19 type_dec: REAL .

    $default  reduce using rule 19 (type_dec)


state 52

   17 type_dec: STRING .

    $default  reduce using rule 17 (type_dec)


state 53

   25 var_dec: VAR identifier COLON type_dec . GIVEN_EQUAL expr
   27        | VAR identifier COLON type_dec .

    GIVEN_EQUAL  shift, and go to state 85

    $default  reduce using rule 27 (var_dec)


state 54

   91 expr: U_PAREN . expr L_PAREN

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 86


state 55

   24 const_val_expr: T_FALSE .

    $default  reduce using rule 24 (const_val_expr)


state 56

   23 const_val_expr: T_TRUE .

    $default  reduce using rule 23 (const_val_expr)


state 57

   21 const_val_expr: INT_NUM .

    $default  reduce using rule 21 (const_val_expr)


state 58

   22 const_val_expr: REAL_NUM .

    $default  reduce using rule 22 (const_val_expr)


state 59

   20 const_val_expr: STR_CONT .

    $default  reduce using rule 20 (const_val_expr)


state 60

   90 expr: MINUS . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 87


state 61

  102 expr: NOT . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 88


state 62

   76 func_proc_call: identifier . @16 func_call_input
   92 expr: identifier .

    U_PAREN   reduce using rule 75 (@16)
    $default  reduce using rule 92 (expr)

    @16  go to state 78


state 63

   84 expr: const_val_expr .

    $default  reduce using rule 84 (expr)


state 64

   93 expr: func_proc_call .

    $default  reduce using rule 93 (expr)


state 65

   26 var_dec: VAR identifier GIVEN_EQUAL expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 26 (var_dec)


state 66

   34 function_def: FUNCTION identifier @5 . U_PAREN argument_dec L_PAREN COLON type_dec

    U_PAREN  shift, and go to state 102


state 67

   32 function_dec: PROCEDURE identifier @4 . U_PAREN argument_dec L_PAREN pre_var_dec pre_stmt END identifier

    U_PAREN  shift, and go to state 103


state 68

   45 statment: BBEGIN @6 . program END

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    program        go to state 104
    pre_var_dec    go to state 4
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 69

   60 cond_check: WHEN . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 105


state 70

   57 simple_statment: T_EXIT cond_check .

    $default  reduce using rule 57 (simple_statment)


state 71

   72 loop_statment: FOR @12 . decreasing identifier @13 COLON expr @14 DOT DOT expr @15 program END FOR

    DECREASING  shift, and go to state 106

    $default  reduce using rule 73 (decreasing)

    decreasing  go to state 107


state 72

   54 simple_statment: GET identifier .

    $default  reduce using rule 54 (simple_statment)


state 73

   62 cond_statment: T_IF @9 . U_PAREN expr L_PAREN THEN program else_block

    U_PAREN  shift, and go to state 108


state 74

   67 loop_statment: LOOP @11 . program END LOOP

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    program        go to state 109
    pre_var_dec    go to state 4
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 75

   53 simple_statment: PUT @8 . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 110


state 76

   55 simple_statment: RESULT expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 55 (simple_statment)


state 77

   51 simple_statment: identifier @7 . GIVEN_EQUAL expr

    GIVEN_EQUAL  shift, and go to state 111


state 78

   76 func_proc_call: identifier @16 . func_call_input

    U_PAREN  shift, and go to state 112

    func_call_input  go to state 113


state 79

   42 statments: statments statment .

    $default  reduce using rule 42 (statments)


state 80

   30 function_dec: function_def pre_var_dec pre_stmt . END identifier

    END  shift, and go to state 114


state 81

    4 identifier: ID @1 U_BRACKET INT_NUM . L_BRACKET

    L_BRACKET  shift, and go to state 115


state 82

   13 const_dec: CONST identifier @2 GIVEN_EQUAL expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 13 (const_dec)


state 83

   15 const_dec: CONST identifier @3 COLON type_dec . GIVEN_EQUAL expr

    GIVEN_EQUAL  shift, and go to state 116


state 84

   28 var_array_dec: VAR identifier COLON ARRAY INT_NUM . DOT DOT INT_NUM OF type_dec

    DOT  shift, and go to state 117


state 85

   25 var_dec: VAR identifier COLON type_dec GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 118


state 86

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   91     | U_PAREN expr . L_PAREN
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    L_PAREN  shift, and go to state 119
    OR       shift, and go to state 89
    AND      shift, and go to state 90
    MINUS    shift, and go to state 91
    PLUS     shift, and go to state 92
    MOD      shift, and go to state 93
    DIV      shift, and go to state 94
    TIMES    shift, and go to state 95
    NOT_EQ   shift, and go to state 96
    EQUAL    shift, and go to state 97
    EM_T     shift, and go to state 98
    M_T      shift, and go to state 99
    EL_T     shift, and go to state 100
    L_T      shift, and go to state 101


state 87

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   90     | MINUS expr .
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 90 (expr)


state 88

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr
  102     | NOT expr .

    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 102 (expr)


state 89

  101 expr: expr OR . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 120


state 90

  100 expr: expr AND . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 121


state 91

   86 expr: expr MINUS . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 122


state 92

   85 expr: expr PLUS . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 123


state 93

   89 expr: expr MOD . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 124


state 94

   88 expr: expr DIV . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 125


state 95

   87 expr: expr TIMES . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 126


state 96

   99 expr: expr NOT_EQ . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 127


state 97

   98 expr: expr EQUAL . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 128


state 98

   96 expr: expr EM_T . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 129


state 99

   97 expr: expr M_T . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 130


state 100

   95 expr: expr EL_T . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 131


state 101

   94 expr: expr L_T . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 132


state 102

   34 function_def: FUNCTION identifier @5 U_PAREN . argument_dec L_PAREN COLON type_dec

    ID  shift, and go to state 10

    $default  reduce using rule 35 (argument_dec)

    identifier    go to state 133
    argument_dec  go to state 134
    identi_req    go to state 135


state 103

   32 function_dec: PROCEDURE identifier @4 U_PAREN . argument_dec L_PAREN pre_var_dec pre_stmt END identifier

    ID  shift, and go to state 10

    $default  reduce using rule 35 (argument_dec)

    identifier    go to state 133
    argument_dec  go to state 136
    identi_req    go to state 135


state 104

   45 statment: BBEGIN @6 program . END

    END  shift, and go to state 137


state 105

   60 cond_check: WHEN expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 60 (cond_check)


state 106

   74 decreasing: DECREASING .

    $default  reduce using rule 74 (decreasing)


state 107

   72 loop_statment: FOR @12 decreasing . identifier @13 COLON expr @14 DOT DOT expr @15 program END FOR

    ID  shift, and go to state 10

    identifier  go to state 138


state 108

   62 cond_statment: T_IF @9 U_PAREN . expr L_PAREN THEN program else_block

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 139


state 109

   67 loop_statment: LOOP @11 program . END LOOP

    END  shift, and go to state 140


state 110

   53 simple_statment: PUT @8 expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 53 (simple_statment)


state 111

   51 simple_statment: identifier @7 GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 141


state 112

   77 func_call_input: U_PAREN . L_PAREN
   78                | U_PAREN . func_input L_PAREN
   80                | U_PAREN . expr @17 L_PAREN

    U_PAREN   shift, and go to state 54
    L_PAREN   shift, and go to state 142
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    func_input      go to state 143
    expr            go to state 144


state 113

   76 func_proc_call: identifier @16 func_call_input .

    $default  reduce using rule 76 (func_proc_call)


state 114

   30 function_dec: function_def pre_var_dec pre_stmt END . identifier

    ID  shift, and go to state 10

    identifier  go to state 145


state 115

    4 identifier: ID @1 U_BRACKET INT_NUM L_BRACKET .

    $default  reduce using rule 4 (identifier)


state 116

   15 const_dec: CONST identifier @3 COLON type_dec GIVEN_EQUAL . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 146


state 117

   28 var_array_dec: VAR identifier COLON ARRAY INT_NUM DOT . DOT INT_NUM OF type_dec

    DOT  shift, and go to state 147


state 118

   25 var_dec: VAR identifier COLON type_dec GIVEN_EQUAL expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 25 (var_dec)


state 119

   91 expr: U_PAREN expr L_PAREN .

    $default  reduce using rule 91 (expr)


state 120

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr
  101     | expr OR expr .

    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 101 (expr)


state 121

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  100     | expr AND expr .
  101     | expr . OR expr

    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 100 (expr)


state 122

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   86     | expr MINUS expr .
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 86 (expr)


state 123

   85 expr: expr . PLUS expr
   85     | expr PLUS expr .
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 85 (expr)


state 124

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   89     | expr MOD expr .
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 89 (expr)


state 125

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   88     | expr DIV expr .
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 88 (expr)


state 126

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   87     | expr TIMES expr .
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 87 (expr)


state 127

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
   99     | expr NOT_EQ expr .
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 99 (expr)


state 128

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   98     | expr EQUAL expr .
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 98 (expr)


state 129

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   96     | expr EM_T expr .
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 96 (expr)


state 130

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   97     | expr M_T expr .
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 97 (expr)


state 131

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   95     | expr EL_T expr .
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 95 (expr)


state 132

   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   94     | expr L_T expr .
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    NOT_EQ  error (nonassociative)
    EQUAL   error (nonassociative)
    EM_T    error (nonassociative)
    M_T     error (nonassociative)
    EL_T    error (nonassociative)
    L_T     error (nonassociative)

    $default  reduce using rule 94 (expr)


state 133

   38 identi_req: identifier . COLON type_dec
   39           | identifier . COLON ARRAY INT_NUM DOT DOT INT_NUM OF type_dec

    COLON  shift, and go to state 148


state 134

   34 function_def: FUNCTION identifier @5 U_PAREN argument_dec . L_PAREN COLON type_dec
   36 argument_dec: argument_dec . COMMA identi_req

    COMMA    shift, and go to state 149
    L_PAREN  shift, and go to state 150


state 135

   37 argument_dec: identi_req .

    $default  reduce using rule 37 (argument_dec)


state 136

   32 function_dec: PROCEDURE identifier @4 U_PAREN argument_dec . L_PAREN pre_var_dec pre_stmt END identifier
   36 argument_dec: argument_dec . COMMA identi_req

    COMMA    shift, and go to state 149
    L_PAREN  shift, and go to state 151


state 137

   45 statment: BBEGIN @6 program END .

    $default  reduce using rule 45 (statment)


state 138

   72 loop_statment: FOR @12 decreasing identifier . @13 COLON expr @14 DOT DOT expr @15 program END FOR

    $default  reduce using rule 69 (@13)

    @13  go to state 152


state 139

   62 cond_statment: T_IF @9 U_PAREN expr . L_PAREN THEN program else_block
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    L_PAREN  shift, and go to state 153
    OR       shift, and go to state 89
    AND      shift, and go to state 90
    MINUS    shift, and go to state 91
    PLUS     shift, and go to state 92
    MOD      shift, and go to state 93
    DIV      shift, and go to state 94
    TIMES    shift, and go to state 95
    NOT_EQ   shift, and go to state 96
    EQUAL    shift, and go to state 97
    EM_T     shift, and go to state 98
    M_T      shift, and go to state 99
    EL_T     shift, and go to state 100
    L_T      shift, and go to state 101


state 140

   67 loop_statment: LOOP @11 program END . LOOP

    LOOP  shift, and go to state 154


state 141

   51 simple_statment: identifier @7 GIVEN_EQUAL expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 51 (simple_statment)


state 142

   77 func_call_input: U_PAREN L_PAREN .

    $default  reduce using rule 77 (func_call_input)


state 143

   78 func_call_input: U_PAREN func_input . L_PAREN
   81 func_input: func_input . COMMA expr

    COMMA    shift, and go to state 155
    L_PAREN  shift, and go to state 156


state 144

   80 func_call_input: U_PAREN expr . @17 L_PAREN
   83 func_input: expr . @18 COMMA expr
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    COMMA     reduce using rule 82 (@18)
    $default  reduce using rule 79 (@17)

    @17  go to state 157
    @18  go to state 158


state 145

   30 function_dec: function_def pre_var_dec pre_stmt END identifier .

    $default  reduce using rule 30 (function_dec)


state 146

   15 const_dec: CONST identifier @3 COLON type_dec GIVEN_EQUAL expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 15 (const_dec)


state 147

   28 var_array_dec: VAR identifier COLON ARRAY INT_NUM DOT DOT . INT_NUM OF type_dec

    INT_NUM  shift, and go to state 159


state 148

   38 identi_req: identifier COLON . type_dec
   39           | identifier COLON . ARRAY INT_NUM DOT DOT INT_NUM OF type_dec

    ARRAY   shift, and go to state 160
    BOOL    shift, and go to state 49
    INT     shift, and go to state 50
    REAL    shift, and go to state 51
    STRING  shift, and go to state 52

    type_dec  go to state 161


state 149

   36 argument_dec: argument_dec COMMA . identi_req

    ID  shift, and go to state 10

    identifier  go to state 133
    identi_req  go to state 162


state 150

   34 function_def: FUNCTION identifier @5 U_PAREN argument_dec L_PAREN . COLON type_dec

    COLON  shift, and go to state 163


state 151

   32 function_dec: PROCEDURE identifier @4 U_PAREN argument_dec L_PAREN . pre_var_dec pre_stmt END identifier

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    pre_var_dec    go to state 164
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 152

   72 loop_statment: FOR @12 decreasing identifier @13 . COLON expr @14 DOT DOT expr @15 program END FOR

    COLON  shift, and go to state 165


state 153

   62 cond_statment: T_IF @9 U_PAREN expr L_PAREN . THEN program else_block

    THEN  shift, and go to state 166


state 154

   67 loop_statment: LOOP @11 program END LOOP .

    $default  reduce using rule 67 (loop_statment)


state 155

   81 func_input: func_input COMMA . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 167


state 156

   78 func_call_input: U_PAREN func_input L_PAREN .

    $default  reduce using rule 78 (func_call_input)


state 157

   80 func_call_input: U_PAREN expr @17 . L_PAREN

    L_PAREN  shift, and go to state 168


state 158

   83 func_input: expr @18 . COMMA expr

    COMMA  shift, and go to state 169


state 159

   28 var_array_dec: VAR identifier COLON ARRAY INT_NUM DOT DOT INT_NUM . OF type_dec

    OF  shift, and go to state 170


state 160

   39 identi_req: identifier COLON ARRAY . INT_NUM DOT DOT INT_NUM OF type_dec

    INT_NUM  shift, and go to state 171


state 161

   38 identi_req: identifier COLON type_dec .

    $default  reduce using rule 38 (identi_req)


state 162

   36 argument_dec: argument_dec COMMA identi_req .

    $default  reduce using rule 36 (argument_dec)


state 163

   34 function_def: FUNCTION identifier @5 U_PAREN argument_dec L_PAREN COLON . type_dec

    BOOL    shift, and go to state 49
    INT     shift, and go to state 50
    REAL    shift, and go to state 51
    STRING  shift, and go to state 52

    type_dec  go to state 172


state 164

   32 function_dec: PROCEDURE identifier @4 U_PAREN argument_dec L_PAREN pre_var_dec . pre_stmt END identifier

    BBEGIN  shift, and go to state 26
    T_EXIT  shift, and go to state 27
    FOR     shift, and go to state 28
    GET     shift, and go to state 29
    T_IF    shift, and go to state 30
    LOOP    shift, and go to state 31
    PUT     shift, and go to state 32
    RESULT  shift, and go to state 33
    RETURN  shift, and go to state 34
    SKIP    shift, and go to state 35
    ID      shift, and go to state 10

    $default  reduce using rule 40 (pre_stmt)

    identifier       go to state 36
    pre_stmt         go to state 173
    statments        go to state 38
    statment         go to state 39
    simple_statment  go to state 40
    cond_statment    go to state 41
    loop_statment    go to state 42
    func_proc_call   go to state 43


state 165

   72 loop_statment: FOR @12 decreasing identifier @13 COLON . expr @14 DOT DOT expr @15 program END FOR

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 174


state 166

   62 cond_statment: T_IF @9 U_PAREN expr L_PAREN THEN . program else_block

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    program        go to state 175
    pre_var_dec    go to state 4
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 167

   81 func_input: func_input COMMA expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 81 (func_input)


state 168

   80 func_call_input: U_PAREN expr @17 L_PAREN .

    $default  reduce using rule 80 (func_call_input)


state 169

   83 func_input: expr @18 COMMA . expr

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 176


state 170

   28 var_array_dec: VAR identifier COLON ARRAY INT_NUM DOT DOT INT_NUM OF . type_dec

    BOOL    shift, and go to state 49
    INT     shift, and go to state 50
    REAL    shift, and go to state 51
    STRING  shift, and go to state 52

    type_dec  go to state 177


state 171

   39 identi_req: identifier COLON ARRAY INT_NUM . DOT DOT INT_NUM OF type_dec

    DOT  shift, and go to state 178


state 172

   34 function_def: FUNCTION identifier @5 U_PAREN argument_dec L_PAREN COLON type_dec .

    $default  reduce using rule 34 (function_def)


state 173

   32 function_dec: PROCEDURE identifier @4 U_PAREN argument_dec L_PAREN pre_var_dec pre_stmt . END identifier

    END  shift, and go to state 179


state 174

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr . @14 DOT DOT expr @15 program END FOR
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 70 (@14)

    @14  go to state 180


state 175

   62 cond_statment: T_IF @9 U_PAREN expr L_PAREN THEN program . else_block

    ELSE  shift, and go to state 181
    END   shift, and go to state 182

    else_block  go to state 183


state 176

   83 func_input: expr @18 COMMA expr .
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 83 (func_input)


state 177

   28 var_array_dec: VAR identifier COLON ARRAY INT_NUM DOT DOT INT_NUM OF type_dec .

    $default  reduce using rule 28 (var_array_dec)


state 178

   39 identi_req: identifier COLON ARRAY INT_NUM DOT . DOT INT_NUM OF type_dec

    DOT  shift, and go to state 184


state 179

   32 function_dec: PROCEDURE identifier @4 U_PAREN argument_dec L_PAREN pre_var_dec pre_stmt END . identifier

    ID  shift, and go to state 10

    identifier  go to state 185


state 180

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 . DOT DOT expr @15 program END FOR

    DOT  shift, and go to state 186


state 181

   64 else_block: ELSE . @10 program END T_IF

    $default  reduce using rule 63 (@10)

    @10  go to state 187


state 182

   65 else_block: END . T_IF

    T_IF  shift, and go to state 188


state 183

   62 cond_statment: T_IF @9 U_PAREN expr L_PAREN THEN program else_block .

    $default  reduce using rule 62 (cond_statment)


state 184

   39 identi_req: identifier COLON ARRAY INT_NUM DOT DOT . INT_NUM OF type_dec

    INT_NUM  shift, and go to state 189


state 185

   32 function_dec: PROCEDURE identifier @4 U_PAREN argument_dec L_PAREN pre_var_dec pre_stmt END identifier .

    $default  reduce using rule 32 (function_dec)


state 186

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT . DOT expr @15 program END FOR

    DOT  shift, and go to state 190


state 187

   64 else_block: ELSE @10 . program END T_IF

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    program        go to state 191
    pre_var_dec    go to state 4
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 188

   65 else_block: END T_IF .

    $default  reduce using rule 65 (else_block)


state 189

   39 identi_req: identifier COLON ARRAY INT_NUM DOT DOT INT_NUM . OF type_dec

    OF  shift, and go to state 192


state 190

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT DOT . expr @15 program END FOR

    U_PAREN   shift, and go to state 54
    T_FALSE   shift, and go to state 55
    T_TRUE    shift, and go to state 56
    ID        shift, and go to state 10
    INT_NUM   shift, and go to state 57
    REAL_NUM  shift, and go to state 58
    STR_CONT  shift, and go to state 59
    MINUS     shift, and go to state 60
    NOT       shift, and go to state 61

    identifier      go to state 62
    const_val_expr  go to state 63
    func_proc_call  go to state 64
    expr            go to state 193


state 191

   64 else_block: ELSE @10 program . END T_IF

    END  shift, and go to state 194


state 192

   39 identi_req: identifier COLON ARRAY INT_NUM DOT DOT INT_NUM OF . type_dec

    BOOL    shift, and go to state 49
    INT     shift, and go to state 50
    REAL    shift, and go to state 51
    STRING  shift, and go to state 52

    type_dec  go to state 195


state 193

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT DOT expr . @15 program END FOR
   85 expr: expr . PLUS expr
   86     | expr . MINUS expr
   87     | expr . TIMES expr
   88     | expr . DIV expr
   89     | expr . MOD expr
   94     | expr . L_T expr
   95     | expr . EL_T expr
   96     | expr . EM_T expr
   97     | expr . M_T expr
   98     | expr . EQUAL expr
   99     | expr . NOT_EQ expr
  100     | expr . AND expr
  101     | expr . OR expr

    OR      shift, and go to state 89
    AND     shift, and go to state 90
    MINUS   shift, and go to state 91
    PLUS    shift, and go to state 92
    MOD     shift, and go to state 93
    DIV     shift, and go to state 94
    TIMES   shift, and go to state 95
    NOT_EQ  shift, and go to state 96
    EQUAL   shift, and go to state 97
    EM_T    shift, and go to state 98
    M_T     shift, and go to state 99
    EL_T    shift, and go to state 100
    L_T     shift, and go to state 101

    $default  reduce using rule 71 (@15)

    @15  go to state 196


state 194

   64 else_block: ELSE @10 program END . T_IF

    T_IF  shift, and go to state 197


state 195

   39 identi_req: identifier COLON ARRAY INT_NUM DOT DOT INT_NUM OF type_dec .

    $default  reduce using rule 39 (identi_req)


state 196

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT DOT expr @15 . program END FOR

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 5 (pre_var_dec)

    program        go to state 198
    pre_var_dec    go to state 4
    variable_dec   go to state 5
    variable_type  go to state 6
    const_dec      go to state 7
    var_dec        go to state 8
    var_array_dec  go to state 9


state 197

   64 else_block: ELSE @10 program END T_IF .

    $default  reduce using rule 64 (else_block)


state 198

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT DOT expr @15 program . END FOR

    END  shift, and go to state 199


state 199

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT DOT expr @15 program END . FOR

    FOR  shift, and go to state 200


state 200

   72 loop_statment: FOR @12 decreasing identifier @13 COLON expr @14 DOT DOT expr @15 program END FOR .

    $default  reduce using rule 72 (loop_statment)
